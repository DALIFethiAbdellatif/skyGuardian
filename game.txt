#include <math.h>
#include <stdbool.h>
#include <stdlib.h>
#include <time.h>
#include "raylib.h"

#define MAX_BULLET 10
#define MAX_ENEMY 10

typedef struct circlePosition
{
    signed int x;
    signed int y;
}POSITION;

typedef struct bullet
{
    signed int x;
    signed int y;
    bool active;
    signed int speedY;
}BULLET;

typedef struct enemy
{
    signed int x;
    signed int y;
    bool active;
    signed int speedX;
}ENEMY;

bool gameState = false;
unsigned int counter = 0;
signed int radius = 5, speed = -10;


void updatePosition(POSITION* position);
void bulletUpdate(BULLET* bullet, POSITION position);
void updateEnemy(ENEMY* enemies);
void fillEnmySpeed(ENEMY* enemies);
void collision(ENEMY* enemies, BULLET* bullet);

int main(void)
{
    POSITION position;
    srand(time(NULL));
    ENEMY enemies[MAX_ENEMY] = {0};
    BULLET bullet[MAX_BULLET] = {0};
    position.y = 760;
    position.x = 400;
    InitWindow(800, 800, "BASIC GAME");
    SetTargetFPS(60);
    fillEnmySpeed(enemies);
    while(!WindowShouldClose())
    {
        if(!gameState)
        {
            if(IsKeyPressed(KEY_ENTER))
                gameState = true;
            BeginDrawing();
                ClearBackground(WHITE);
                DrawText("SHOOTING GAME", 250, 250, 20, BLACK);
                DrawText("PRESS ENTER TO START", 250, 300, 20, BLACK);
                DrawText("BUILD BY : ", 200, 600, 20, BLACK);
                DrawText("DALI FETHI ABDELLATIF", 300, 650, 20, BLACK);
            EndDrawing();
        }
        else
        {
            if(counter == 10)
            {
                counter = 0;
                gameState = false;
            }
            else
            {
                updatePosition(&position);
                bulletUpdate(bullet, position);
                updateEnemy(enemies);
                collision(enemies, bullet);
                BeginDrawing();
                    ClearBackground(WHITE);
                    DrawRectangle(position.x, position.y, 40, 40, BLACK);
                    for(unsigned int i = 0; i < MAX_ENEMY; ++i)
                    {
                        if(enemies[i].active)
                            DrawCircle(enemies[i].x, enemies[i].y, radius, RED);
                    }
                    for(unsigned int i = 0; i < MAX_BULLET; ++i)
                    {
                        if(bullet[i].active)
                        DrawCircle(bullet[i].x, bullet[i].y, radius, GREEN);
                    }
                EndDrawing();
            }
        }
    }
    CloseWindow();
    return 0;
}
void fillEnmySpeed(ENEMY* enemies)
{
    for(unsigned int i = 0; i < MAX_ENEMY; ++i)
        enemies[i].speedX = rand()%5 + 1;
}
void updateEnemy(ENEMY* enemies)
{
    bool allEnmiesInactive = true;
    for(unsigned int i = 0; i < MAX_ENEMY; ++i)
    {
        if(enemies[i].active)
        {        
            allEnmiesInactive = false;
            break;
        }
    }
    if(allEnmiesInactive)
    {
        for(unsigned int i = 0; i < MAX_ENEMY; ++i)
        {
            if(!enemies[i].active)
            {
                enemies[i].active = true;
                enemies[i].x = rand()%700;
                enemies[i].y = rand()%300;
            }
        }
    }
    for(unsigned int i = 0; i < MAX_ENEMY; ++i)
    {
        if(enemies[i].active)
        {
            enemies[i].x += enemies[i].speedX;
            if(enemies[i].x < 0 || enemies[i].x > 800)
                enemies[i].speedX *= -1;
        }
    }
}
void bulletUpdate(BULLET* bullet, POSITION position)
{
    if(IsKeyPressed(KEY_SPACE))
    {
        for(unsigned int i = 0; i < MAX_BULLET; ++i)
        {
            if(!bullet[i].active)
            {
                bullet[i].active = true;
                bullet[i].x = position.x;
                bullet[i].y = position.y;
                bullet[i].speedY = speed;
                break;
            }
        }
    }
    for(unsigned int i = 0; i < MAX_BULLET; ++i)
    {
        if(bullet[i].active)
        {
            bullet[i].y += bullet[i].speedY;
            if(bullet[i].y <  0)
                bullet[i].active = false;
        }
    }
}
void updatePosition(POSITION* position)
{
    if(IsKeyDown(KEY_LEFT))
        position->x -= 3;
    else if(IsKeyDown(KEY_RIGHT))
        position->x += 3;
}
void collision(ENEMY* enemies, BULLET* bullet)
{
    float distance = 0.0f;
    for(unsigned int i = 0; i < MAX_BULLET; ++i)
    {
        if(bullet[i].active)
        {
            for(unsigned int j = 0; j < MAX_ENEMY; ++j)
            {
                if(enemies[j].active)
                {
                    distance = sqrt(pow(bullet[i].x - enemies[j].x, 2) + pow(bullet[i].y - enemies[j].y, 2));
                    if(distance <= (radius*2))
                    {
                        bullet[i].active = false;
                        enemies[j].active = false;
                        ++counter;
                        break;
                    }
                }
            }
        }
    }
}